#!/bin/python3
### original attempt using inefficient brute force recursion
import sys

n,k,m = input().strip().split(' ')
n,k,m = [int(n),int(k),int(m)]
#n letters in alphabet, k transformations, m = length of sequence

def find(vertice, dict):
    notfound = True
    pointer = vertice
    while notfound:
        if dict[pointer][0] != pointer:
            pointer = dict[pointer][0]
        else:
            notfound = False
            return dict[pointer][0]

def union(dict, vertice1, vertice2):
    head1 = find(vertice1, dict)
    head2 = find(vertice2, dict)
    if dict[head1][1] > dict[head2][1]:
        dict[head2] = (head1, dict[head2][1])
        dict[head1] = (head1, dict[head1][1] + 1)
    elif dict[head1][1] < dict[head2][1]:
        dict[head1] = (head2, dict[head1][1])
        dict[head2] = (head2, dict[head1][1] + 1)
    else:
        dict[head2] = (head1, dict[head2][1])
        dict[head1] = (head1, dict[head1][1] + 1)

        
### DFS 

unionfinddict = {}
        
transformations = {}
for i in range(n):
    transformations[i+1] = (i+1,1)

for a0 in range(k):
    x,y = input().strip().split(' ')
    x,y = [int(x),int(y)]
    head1 = find(x, transformations)
    head2 = find(y, transformations)
    union(transformations, head1, head2)
    
a = list(map(int, input().strip().split(' ')))
longestpalindrome = 1
def palindromemaker(startindex, lastindex, currentlen):
    global longestpalindrome
    if lastindex - startindex + currentlen < longestpalindrome:
        return None
    if startindex == lastindex:
        if currentlen > longestpalindrome:
            longestpalindrome = currentlen
        return None
    letter = a[startindex]
    for i in range(lastindex - 1, startindex, -1):
        if a[i] == letter:
            if lastindex - 1 == i: 
                palindromemaker(startindex = startindex + 1, lastindex = i, currentlen = currentlen + 2)
                return None
            else: 
                palindromemaker(startindex = startindex + 1, lastindex = i, currentlen = currentlen + 2)       
    if startindex + 1 == lastindex:
        palindromemaker(startindex = startindex+1, lastindex = lastindex, currentlen = currentlen + 1)
    else:
        palindromemaker(startindex = startindex+1, lastindex = lastindex, currentlen = currentlen)
        
for i in range(0, len(a)): 
    if a[i] not in unionfinddict: 
        lookup = a[i]
        a[i] = find(a[i], transformations)
        unionfinddict[lookup] = a[i]
    else:
        a[i] = unionfinddict[a[i]]

palindromemaker(startindex = 0, lastindex = len(a), currentlen = 0)    
print(longestpalindrome)


#a = sequence
